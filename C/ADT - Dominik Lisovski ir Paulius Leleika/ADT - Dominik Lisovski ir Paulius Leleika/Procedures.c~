#include "header.h"

void DeleteNulls(numb **answ)
{
	numb *temp = NULL;
	if (*answ)
		while (((*answ)->prev) && (((*answ)->val) == 0))
		{
			if (((*answ)->val) == 0)
			{
				temp = (*answ);
				(*answ) = (*answ)->prev;
				free(temp);
				(*answ)->next = NULL;
			}
		}
}
void Twister(numb **mult)
{
	int next, prev;
	while ((*mult)->prev)
	{
		next = (*mult)->next;
		prev = (*mult)->prev;
		(*mult)->next = prev;
		(*mult)->prev = next;
		(*mult) = (*mult)->next;
	}
	next = (*mult)->next;
	prev = (*mult)->prev;
	(*mult)->next = prev;
	(*mult)->prev = next;
}
void TwisterMul(numb **mult)
{
	int next, prev;
	while ((*mult)->next)
	{
		next = (*mult)->next;
		prev = (*mult)->prev;
		(*mult)->next = prev;
		(*mult)->prev = next;
		(*mult) = (*mult)->prev;
	}
	next = (*mult)->next;
	prev = (*mult)->prev;
	(*mult)->next = prev;
	(*mult)->prev = next;
}
short AddNumbToStart(numb **tail, short i)
{
	numb *curr;
	curr = (numb *)malloc(sizeof(numb));
	if (curr == NULL) return 1;
	curr->val = i;
	if ((*tail) != NULL) (*tail)->prev = curr;
	curr->next = *tail;
	curr->prev = NULL;
	*tail = curr;
	return 0;
}
short AddNumbToEnd(numb **tail, short i)
{
	numb *curr;
	curr = (numb *)malloc(sizeof(numb));
	if (curr == NULL) return 1;
	curr->val = i;
	if ((*tail) != NULL) (*tail)->next = curr;
	curr->prev = *tail;
	curr->next = NULL;
	*tail = curr;
	return 0;
}
void DelAll(numb *tail)
{
	numb *temp;
	while (tail)
	{
		temp = tail->next;
		free(tail);
		tail = temp;
	}
}
void FreeOne(numb *head)
{
	head->prev->next = NULL;
	free(head);
}
int Add(numb **sum, numb *tail1, numb *tail2)
{
	short over = 0, addition, err;
	while ((tail1 != NULL) && (tail2 != NULL))
	{
		addition = tail1->val + tail2->val + over;
		over = addition / 10;
		if ((err = AddNumbToEnd(sum, addition % 10)>0)) return err;
		tail1 = tail1->next;
		tail2 = tail2->next;
	}
	while (tail1 != NULL)      //Jei pirmas didesnis
	{
		addition = tail1->val + over;
		over = addition / 10;
		if ((err = AddNumbToEnd(sum, addition % 10)>0)) return err;
		tail1 = tail1->next;
	}
	while (tail2 != NULL)      //Jei antras didesnis
	{
		addition = tail2->val + over;
		over = addition / 10;
		if ((err = AddNumbToEnd(sum, addition % 10)>0)) return err;
		tail2 = tail2->next;
	}
	if ((tail1 == NULL) && (over > 0) && (tail2 == NULL))
		if ((err = AddNumbToEnd(sum, over)>0)) return err;
	Twister(sum);
	return 0;
}

short Multiplication(numb **total, numb *tail1, numb *tail2)
{
	numb *mult = NULL, *tail2holder, *totalholder = NULL, *temp = NULL;
	short over = 0, mul, err, val;
	long cikliukas = 0, i;
	tail2holder = tail2;
	while (tail1 != NULL)
	{
		tail2 = tail2holder;
		while (tail2 != NULL)
		{
			mul = tail1->val * tail2->val + over;
			over = mul / 10;
			if ((err = AddNumbToStart(&mult, mul % 10)>0)) return err;
			tail2 = tail2->next;
		}
		if ((tail2 == NULL) && (over > 0))
			if ((err = AddNumbToStart(&mult, over)>0)) return err;
		TwisterMul(&mult);
		DelAll(totalholder);
		totalholder = (*total);
		(*total) = NULL;
		if (totalholder)
		{
			while (totalholder->prev)
				totalholder = totalholder->prev;
			while (totalholder)
			{
				val = totalholder->val;
				if ((err = AddNumbToStart(&temp, val)>0)) return err;
				totalholder = totalholder->next;
			}
			DelAll(totalholder);
			totalholder = temp;
			temp = NULL;
		}
		for (i = 0; i<cikliukas; i++)
			if ((err = AddNumbToStart(&mult, 0)>0)) return err;
		if ((err = Add(total, mult, totalholder)>0)) return err;
		DelAll(mult);
		mult = NULL;
		tail1 = tail1->next;
		cikliukas++;
	}
	return 0;
}
short SignArithmetics(numb **answ, numb *tail1, numb *tail2, short sign1, short sign2, char action, short *total_sign)
{
	short err;
	switch (action)
	{
	case '+':
		if (sign1 == -1 && sign2 == 1)
		{

			if (IsGreater(tail1, tail2))
			{
				GetHead(answ, tail1);
				*total_sign = -1;
				if ((err = Sub(answ, tail1, tail2))>0) return err;
			}
			else
			{
				GetHead(answ, tail2);
				*total_sign = 1;
				if ((err = Sub(answ, tail2, tail1))>0) return err;
			}
		}
		else if (sign1 == 1 && sign2 == 1)
		{
			*total_sign = 1;
			if ((err = Add(answ, tail1, tail2)>0)) return err;
			Twister(answ);
		}
		else if (sign1 == -1 && sign2 == -1)
		{
			*total_sign = -1;
			if ((err = Add(answ, tail1, tail2)>0)) return err;
			Twister(answ);
		}
		else if (sign1 == 1 && sign2 == -1)
		{
			if (IsGreater(tail1, tail2))
			{
				GetHead(answ, tail1);
				*total_sign = 1;
				if ((err = Sub(answ, tail1, tail2))>0) return err;
			}
			else
			{
				GetHead(answ, tail2);
				*total_sign = -1;
				if ((err = Sub(answ, tail2, tail1))>0) return err;
			}
		}
		break;
	case '-':
		if (sign1 == -1 && sign2 == -1)
		{
			if (IsGreater(tail1, tail2))
			{
				GetHead(answ, tail1);
				*total_sign = -1;
				if ((err = Sub(answ, tail1, tail2))>0) return err;
			}
			else
			{
				GetHead(answ, tail2);
				*total_sign = 1;
				if ((err = Sub(answ, tail2, tail1))>0) return err;
			}
		}
		else if (sign1 == -1 && sign2 == 1)
		{
			*total_sign = -1;
			if ((err = Add(answ, tail1, tail2)>0)) return err;
			Twister(answ);
		}
		else if (sign1 == 1 && sign2 == -1)
		{
			*total_sign = 1;
			if ((err = Add(answ, tail1, tail2)>0)) return err;
			Twister(answ);
		}
		else if (sign1 == 1 && sign2 == 1)
		{
			if (IsGreater(tail1, tail2))
			{
				GetHead(answ, tail1);
				*total_sign = 1;
				if ((err = Sub(answ, tail1, tail2))>0) return err;
			}
			else
			{
				GetHead(answ, tail2);
				*total_sign = -1;
				if ((err = Sub(answ, tail2, tail1))>0) return err;
			}
		}
		break;
	case '*':
		*total_sign = sign1*sign2;
		if (IsGreater(tail1, tail2))
		{
			if ((err = Multiplication(answ, tail2, tail1)) >0) return err;
			Twister(answ);
			DeleteNulls(answ);
		}
		else
		{
			if ((err = Multiplication(answ, tail1, tail2)) >0) return err;
			Twister(answ);
			DeleteNulls(answ);
		}
		break;
	case '/':
		GetHead(answ, tail1);
		*total_sign = sign1*sign2;
		if (!IsGreater(tail1, tail2)) *answ = tail1;
		else Div(tail1, tail2, answ);
		break;
	case '%':
		GetHead(answ, tail1);
		*total_sign = sign1*sign2;
		if (!IsGreater(tail1, tail2));
		else Mod(tail1, tail2, answ);
		break;
	default: return 4;
	}
	return 0;
}
void GetHead(numb **head, numb *tail)
{
	while (tail)
	{
		*head = tail;
		tail = tail->next;
	}
}
short GetSign(short *sign, char num[])
{
	if (num[0] == '-')
		*sign = -1;
}
short GetNumber(numb **tail, char *num)
{
	char val;
	int i = 0;
	short err;

	if (num[i] == '-') i++;
	else if (num[i] == '\n') return 3;
	while (num[i] == '0')
	{
		i++;
	}
	if (num[i] == '\n')
	{
		val = 0;
		if ((err = AddNumbToStart(tail, val)>0)) return err;
	}
	while ((val = num[i++]) != '\n')
	{
		if (val >= '0'&&val <= '9')
		{
			val -= '0';
			if ((err = AddNumbToStart(tail, val)>0)) return err;
		}
		else return 2; //klaidingas skaicius
	}
	return 0;
}
short IsGreater(numb *tail1, numb* tail2)
{
	if (tail1&&tail2)
	{
		while (tail1->next&&tail2->next)
		{
			tail1 = tail1->next;
			tail2 = tail2->next;
		}
		if (tail1->next != NULL&&tail2->next == NULL) return 1;
		if (tail1->next == NULL&&tail2->next != NULL) return 0;
		if (tail1->next == NULL&&tail2->next == NULL)
		{
			while ((tail1->val == tail2->val) && (tail1->prev != NULL))
			{
				tail1 = tail1->prev;
				tail2 = tail2->prev;
			}
			if (tail1->val >= tail2->val) return 1;
			else
				return 0;
		}
	}
	return 0;
}
short Sub(numb **head1, numb *tail1, numb *tail2)
{
	short diff, aux = 0, val;
	numb *temp = head1;
	while (tail2 != NULL || tail1 != NULL || aux)
	{
		if (tail1&&tail2)
		{
			tail1->val -= tail2->val;
		}
		else if (tail2 == NULL&&tail1 != NULL)val = tail1->val;
		tail1->val += aux;
		diff = 0, aux = 0;
		if (tail1->val<0)
		{
			diff = 10;
			aux = -1;
		}
		tail1->val += diff;
		if (tail1 != NULL) tail1 = tail1->next;
		if (tail2 != NULL) tail2 = tail2->next;
		while ((*head1)->val == 0 && ((*head1)->prev != NULL))
		{
			temp = *head1;
			*head1 = (*head1)->prev;
			FreeOne(temp);
		}
	}
	return 0;
}
short Mod(numb *tail1, numb *tail2, numb **head1)
{
	short err;
	while (IsGreater(tail1, tail2))
		if ((err = Sub(head1, tail1, tail2))>0) return err;
	return 0;
}
short Div(numb *tail1, numb *tail2, numb **head1)
{
	short err;
	numb *temp;
	temp->val = 0;
	while (IsGreater(tail1, tail2))
	{
		if ((err = Sub(head1, tail1, tail2))>0) return err;
		(temp->val)++;
		if (temp->val == 9)
		{
			// Add(answ, temp);
			temp->val = 0;;
		}
	}
	return 0;
}
void AddSignToAnsw(numb *answ, short total_sign)
{
	answ->val *= total_sign;
}
short LongNumber(char *num1, char *num2, short action, numb **answ)
{
	numb *tail1 = NULL, *tail2 = NULL;
	short sign1 = 1, sign2 = 1, err, total_sign;

	GetSign(&sign1, num1);
	GetSign(&sign2, num2);
	if ((err = GetNumber(&tail1, num1))>0) return err;
	if ((err = GetNumber(&tail2, num2))>0) return err;
	SignArithmetics(answ, tail1, tail2, sign1, sign2, action, &total_sign);
	DelAll(tail1);
	DelAll(tail2);
	AddSignToAnsw(*answ, total_sign);
	return 0;
}
